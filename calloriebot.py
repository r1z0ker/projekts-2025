import logging
import asyncio
import json
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart, Command

API_TOKEN = '7626822244:AAE09A1kjkUOJ4ZYUtaz_LYkr51X0GjbNkI'

FOOD_DATA_FILE = "food_data.json"

# === –†–∞–±–æ—Ç–∞ —Å JSON ===
def load_food_data():
    try:
        with open(FOOD_DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}
    except json.JSONDecodeError:
        return {}

def save_food_data(data):
    with open(FOOD_DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# === –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ ===
def get_product_data(product_name: str, weight: float):
    if weight <= 0:
        return None
    data = food_data.get(product_name.lower())
    if data is None:
        return None
    kkal, protein, fat, carbs = data
    w = weight / 100
    return {
        "calories": round(kkal * w, 1),
        "proteins": round(protein * w, 1),
        "fats": round(fat * w, 1),
        "carbs": round(carbs * w, 1)
    }

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
food_data = load_food_data()

# === –ö–æ–º–∞–Ω–¥—ã ===
@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –∫–∞–ª–æ—Ä–∏–π –∏ –ë–ñ–£.\n\n"
        "üìå –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏:\n"
        "`–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–¥—É–∫—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≤_–≥—Ä–∞–º–º–∞—Ö`\n"
        "–ü—Ä–∏–º–µ—Ä: `—Å—ã—Ä 50`\n\n"
        "–Ø –ø–æ–∫–∞–∂—É, —Å–∫–æ–ª—å–∫–æ –≤ –Ω—ë–º –∫–∞–ª–æ—Ä–∏–π, –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤.",
        parse_mode=ParseMode.MARKDOWN
    )

@dp.message(Command("help"))
async def help_command(message: Message):
    await message.answer(
        "–ù–∞–ø–∏—à–∏ –ø—Ä–æ–¥—É–∫—Ç –∏ –º–∞—Å—Å—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n"
        "`—à–æ–∫–æ–ª–∞–¥ 30` ‚Äî –∏ —è –ø–æ–∫–∞–∂—É –∫–∞–ª–æ—Ä–∏–∏, –±–µ–ª–∫–∏, –∂–∏—Ä—ã –∏ —É–≥–ª–µ–≤–æ–¥—ã.\n\n"
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/list_products ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
        "/add_product <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–∫–∫–∞–ª> <–±–µ–ª–∫–∏> <–∂–∏—Ä—ã> <—É–≥–ª–µ–≤–æ–¥—ã>",
        parse_mode=ParseMode.MARKDOWN
    )

@dp.message(Command("list_products"))
async def list_products(message: Message):
    if not food_data:
        await message.answer("ü•≤ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.")
        return

    text = "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:*\n"
    for name, values in food_data.items():
        text += f"‚Ä¢ {name.title()} ‚Äî {values[0]} –∫–∫–∞–ª, {values[1]}–±/{values[2]}–∂/{values[3]}—É\n"
    await message.answer(text, parse_mode=ParseMode.MARKDOWN)

@dp.message(Command("add_product"))
async def add_product_command(message: Message):
    parts = message.text.strip().split()
    if len(parts) != 6:
        await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /add_product <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–∫–∫–∞–ª> <–±–µ–ª–∫–∏> <–∂–∏—Ä—ã> <—É–≥–ª–µ–≤–æ–¥—ã>")
        return

    _, name, k, b, j, u = parts
    try:
        food_data[name.lower()] = [int(k), float(b), float(j), float(u)]
        save_food_data(food_data)
        await message.answer(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç '{name}' –¥–æ–±–∞–≤–ª–µ–Ω.")
    except Exception:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª.")

@dp.message(F.text)
async def handle_food(message: Message):
    text = message.text.lower().strip()
    if text.startswith("/add_product"):
        return

    try:
        name, grams = text.rsplit(" ", 1)
        weight = float(grams.replace(",", "."))

        result = get_product_data(name, weight)
        if result is None:
            await message.answer("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –º–∞—Å—Å–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞.")
            return

        reply = (
            f"üîç *{name.title()}* ({weight:.0f} –≥):\n"
            f"üçΩ –ö–∞–ª–æ—Ä–∏–∏: *{result['calories']}* –∫–∫–∞–ª\n"
            f"ü•© –ë–µ–ª–∫–∏: *{result['proteins']}* –≥\n"
            f"üßà –ñ–∏—Ä—ã: *{result['fats']}* –≥\n"
            f"üçû –£–≥–ª–µ–≤–æ–¥—ã: *{result['carbs']}* –≥"
        )
        await message.answer(reply, parse_mode=ParseMode.MARKDOWN)
    except:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `–ø—Ä–æ–¥—É–∫—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`, –Ω–∞–ø—Ä–∏–º–µ—Ä: `—Å—ã—Ä 50`", parse_mode=ParseMode.MARKDOWN)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
